/*create table Employees(
worker_id int ,
name varchar(100),
department_id int,
hire_date date,
salary decimal(10,2)
);*/

/*insert into Employees(worker_id,name,department_id,hire_date,salary) values
(1,'Alice', 10,'2022-01-15',70000.00),
(2,'Bob',20,'2022-02-19',50000.00);*/

/*-- Create the Contractors table if it does not exist
CREATE TABLE Contractors (
    contractor_id INT PRIMARY KEY,
    name VARCHAR(100),
    department_id INT,
    start_date DATE,
    hourly_rate DECIMAL(10, 2)
);

-- Insert data into the Contractors table
INSERT INTO Contractors (contractor_id, name, department_id, start_date, hourly_rate) VALUES
(1, 'John Doe', 10, '2022-03-01', 50.00),
(2, 'Jane Smith', 20, '2022-04-15', 60.00),
(3, 'Jim Brown', 30, '2022-05-20', 55.00),
(4, 'Jake White', 40, '2022-06-25', 65.00);*/

/*-query1

create view allworkers as  
select
  worker_id,
  name,
  department_id,
  hire_date,
  salary

  from Employees


UNION
select 
contractor_id as worker_id,
name,
department_id,
start_date as hire_date,
hourly_rate as salary

from Contractors
select * from allworkers*/

/*--query2
CREATE VIEW CombinedSales AS
SELECT
  worker_id,
  name,
  department_id,
  hire_date,
  salary
FROM Employees
UNION ALL
SELECT 
  contractor_id AS worker_id,
  name,
  department_id,
  start_date AS hire_date,
  hourly_rate AS salary
FROM Contractors;
 select * from CombinedSales*/

 /*--query 3
 -- Create CurrentCustomers Table
CREATE TABLE CurrentCustomers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    join_date DATE
);

-- Create FormerCustomers Table
CREATE TABLE FormerCustomers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    leave_date DATE
);
-- Insert Data into CurrentCustomers Table
INSERT INTO CurrentCustomers (customer_id, name, join_date) VALUES
(1, 'Alice Smith', '2022-01-15'),
(2, 'Bob Johnson', '2022-02-19'),
(3, 'Charlie Brown', '2022-03-21');

-- Insert Data into FormerCustomers Table
INSERT INTO FormerCustomers (customer_id, name, leave_date) VALUES
(2, 'Bob Johnson', '2023-01-10'),
(4, 'David Clark', '2022-12-05');
-- Query to Retrieve Customers Currently in CurrentCustomers but Not in FormerCustomers

select cc.* 
from CurrentCustomers as cc
LEFT join FormerCustomers as fc
ON cc.customer_id=fc.customer_id
where fc.customer_id is null;*/

-- Create HighValueCustomers Table
/*CREATE TABLE HighValueCustomers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    high_value_flag INT -- Assuming 1 represents high-value customer, 0 represents non-high-value customer
);

-- Create RepeatCustomers Table
CREATE TABLE RepeatCustomers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    repeat_purchase_flag INT -- Assuming 1 represents repeat customer, 0 represents non-repeat customer
);

-- Insert Data into HighValueCustomers Table
INSERT INTO HighValueCustomers (customer_id, name, high_value_flag) VALUES
(1, 'Alice Smith', 1),
(2, 'Bob Johnson', 0),
(3, 'Charlie Brown', 1);

-- Insert Data into RepeatCustomers Table
INSERT INTO RepeatCustomers (customer_id, name, repeat_purchase_flag) VALUES
(1, 'Alice Smith', 1),
(2, 'Bob Johnson', 1),
(4, 'David Clark', 1);*/

-- Query to Retrieve Customers Who Appear in Both HighValueCustomers and RepeatCustomers Tables
/*SELECT 
    hvc.customer_id, 
    hvc.name, 
    hvc.high_value_flag, 
    rc.repeat_purchase_flag
FROM 
    HighValueCustomers hvc
INNER JOIN 
    RepeatCustomers rc ON hvc.customer_id = rc.customer_id;*/

	/*--query 5
	CREATE TABLE Emplo (
    employee_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    manager_id INT,
	 FOREIGN KEY (manager_id) REFERENCES Emplo(employee_id)
    
);

INSERT INTO Emplo (employee_id, name, manager_id) VALUES
(1, 'Alice', NULL),
(2, 'Bob', 1),
(3, 'Charlie', 1),
(4, 'David', 2),
(5, 'Eve', 2);*/

/*SELECT 
    e.employee_id AS employee_id,
    e.name AS employee_name,
    m.employee_id AS manager_id,
    m.name AS manager_name
FROM 
    Emplo e
LEFT JOIN 
    Emplo m ON e.manager_id = m.employee_id;*/

	/*--query6
	CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(10, 2),
    customer_id INT,
    
);
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(20)
);
INSERT INTO Customers (customer_id, customer_name, email, phone) VALUES
(1, 'John Doe', 'john@example.com', '123-456-7890'),
(2, 'Jane Smith', 'jane@example.com', '987-654-3210'),
(3, 'Michael Johnson', 'michael@example.com', '456-789-0123');
INSERT INTO Orders (order_id, order_date, amount, customer_id) VALUES
(1, '2024-05-01', 100.00, 1),
(2, '2024-05-03', 150.50, 2),
(3, '2024-05-05', 75.25, 1),
(4, '2024-05-08', 200.00, 3),
(5, '2024-05-10', 125.75, 2);
SELECT 
    o.order_id,
    o.order_date,
    o.amount,
    c.customer_id,
    c.customer_name,
    c.email,
    c.phone
FROM 
    Orders o
LEFT JOIN 
    Customers c ON o.customer_id = c.customer_id;*/

	--query 7
	/*create table Employees(
	Employee_id int,
	name  varchar(100));

	CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);
alter table Employees
add department_id int;

INSERT INTO Departments (department_id, department_name) VALUES
(1, 'Human Resources'),
(2, 'Engineering'),
(3, 'Marketing');

INSERT INTO Employees (Employee_id, name, department_id) VALUES
(1, 'Alice', 1),
(2, 'Bob', 2),
(3, 'Charlie', 2),
(4, 'David', 3),
(5, 'Eve', NULL);  -- Eve does not belong to any department


SELECT 
    d.department_id,
    d.department_name,
    e.Employee_id,
    e.name AS employee_name
FROM 
    Departments d
LEFT JOIN 
    Employees e ON d.department_id = e.department_id;*/

	/*--query 8
	create table colors(
	color_id int,
	color_name varchar(100))

	create table sizes(
	size_id int,
	size_nmae varchar(100))

	insert into colors (color_id,color_name)values
	(1,'red'),
	(2,'blue');

	insert into sizes(size_id,size_nmae) values
	(1,'small'),
	(2,'medium'),
	(3,'large');

	select color_name, size_nmae

	from colors c

	cross join 

	sizes s;

	select * from customers
	select * from orders
	
	select c.customer_id, c.customer_name, o.order_date,o.amount
	from customers c
	left join orders o ON  c.customer_id=o.order_id;

	-- Create Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100)
);

-- Create Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(10, 2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Insert sample data into Customers table
INSERT INTO Customers (customer_id, customer_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

-- Insert sample data into Orders table
INSERT INTO Orders (order_id, order_date, amount, customer_id) VALUES
(1, '2023-01-15', 150.50, 1),
(2, '2023-01-17', 200.00, 1),
(3, '2023-01-20', 99.99, 2);

-- Query to retrieve all customers with their orders
SELECT 
    c.customer_id,
    c.customer_name,
    o.order_id,
    o.order_date,
    o.amount
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.customer_id = o.customer_id;*/
-- Create Students table
-- Create Students table*/

	/*--query 10


-- Create Students table
CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100)
);

-- Create Grades table
CREATE TABLE Grades (
    grade_id INT PRIMARY KEY,
    student_id INT,
    grade VARCHAR(10)
);

-- Insert sample data into Students table
INSERT INTO Students (student_id, student_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

-- Insert sample data into Grades table
INSERT INTO Grades (grade_id, student_id, grade) VALUES
(1, 1, 'A'),
(2, 2, 'B'),
(3, NULL, 'C'), -- Grade without an associated student
(4, 4, 'D');    -- Grade with a non-existent student (student_id 4 does not exist in Students table)

-- Query to retrieve all students with their grades using UNION of LEFT JOIN and RIGHT JOIN
-- Create Students table
/*CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100)
);

-- Create Grades table
CREATE TABLE Grades (
    grade_id INT PRIMARY KEY,
    student_id INT,
    grade VARCHAR(10),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- Insert sample data into Students table
INSERT INTO Students (student_id, student_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

-- Insert sample data into Grades table
INSERT INTO Grades (grade_id, student_id, grade) VALUES
(1, 1, 'A'),
(2, 2, 'B'),
(3, NULL, 'C'), -- Grade without an associated student
(4, 4, 'D');    -- Grade with a non-existent student (student_id 4 does not exist in Students table)

-- Query to retrieve all students with their grades
SELECT 
    s.student_id,
    s.student_name,
    g.grade_id,
    g.grade
FROM 
    Students s
FULL OUTER JOIN 
    Grades g ON s.student_id = g.student_id;*/

	-- query 11*/

	/*CREATE TABLE Employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(255),
    department_id INT,
    salary DECIMAL(10, 2),
    
);
INSERT INTO Employees (employee_id, employee_name, department_id, salary) 
VALUES
(1, 'John Doe', 1, 50000.00),
(2, 'Jane Smith', 2, 60000.00),
(3, 'Mike Johnson', 1, 55000.00),
(4, 'Emily Brown', 3, 52000.00),
(5, 'Chris Lee', 2, 58000.00);*/



create view Employeedetails AS
select e.employee_id,
       e.employee_name,
	   e.department_id,
	   d.department_name,
	   e.salary

	   from Employees e

	   join Departments d ON e.department_id=d.department_id

	   select* from   Employeedetails;





























